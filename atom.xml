<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>罗臣浩的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-04T08:53:38.626Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Mr luo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Object.create()和new object()和{}的区别</title>
    <link href="http://example.com/2021/01/04/Object-create-%E5%92%8Cnew-object-%E5%92%8C-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2021/01/04/Object-create-%E5%92%8Cnew-object-%E5%92%8C-%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2021-01-04T08:52:50.000Z</published>
    <updated>2021-01-04T08:53:38.626Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Object-create-介绍"><a href="#Object-create-介绍" class="headerlink" title="Object.create()介绍"></a><strong>Object.create()介绍</strong></h2><blockquote><p>Object.Create(null)创建的对象是一个空对象吗，在该对象上没有继承Object.prototype原型链上的属性或者方法，例如：toString()、hasOwnPropertiesObject();</p></blockquote><p>Object.create()方法接受两个参数：Object.create(obj,propertiesObject)</p><p>obj：一个对象，应该是新创建的对象的原型。</p><p>propertiesObject：非必填。该参数对象是一组属性和值，该对象的属性名称将是新创建的对象的属性名称，值是属性描述符（这些属性描述的结构与Object.defineProperties()的第二个参数意义）。注意：该参数名称不能是undefined，另外只有对象中自身拥有的可枚举的属性才有效，也就是说该对象的原型链上属性是无效的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> object = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype,&#123;</span><br><span class="line">    <span class="comment">// foo会成为所创建对象的数据属性</span></span><br><span class="line">    foo:&#123;</span><br><span class="line">        writable:<span class="literal">true</span>,</span><br><span class="line">        configurable:<span class="literal">true</span>,</span><br><span class="line">        value: <span class="string">&quot;hello&quot;</span> </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// bar会成为所创建对象的访问器属性</span></span><br><span class="line">    bar:&#123;</span><br><span class="line">        configurable: <span class="literal">false</span>,</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">10</span> &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;Setting `o.bar` to&quot;</span>, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(object);<span class="comment">//&#123;foo:&#x27;hello&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test1 = <span class="built_in">Object</span>.create(<span class="literal">null</span>) ;</span><br><span class="line"><span class="built_in">console</span>.log(test1)    <span class="comment">//&#123;&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>因为在bar中设置了configurable，使用set、get方法默认都不起作用，所以bar值无法赋值或者获取</p><p>这里的object对象继承了Object.prototype   Object上的原型方法</p><p>我们可以通过  对象  _ proto _ 属性来获取对象原型链上的方法</p></blockquote><h2 id="new-Object"><a href="#new-Object" class="headerlink" title="new Object()"></a>new Object()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test1 = &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">var</span> test2 = <span class="keyword">new</span> <span class="built_in">Object</span>(test1)</span><br><span class="line"><span class="keyword">var</span> test3 = <span class="built_in">Object</span>.create(test1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test3)   <span class="comment">//&#123;&#125; __proto__:&#123;x:&#x27;1&#x27;&#125;</span></span><br><span class="line"><span class="keyword">var</span> test4 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　</span><br><span class="line">&#125;</span><br><span class="line">test4.prototype = test1;</span><br><span class="line"><span class="keyword">var</span> test5 = <span class="keyword">new</span> test4();</span><br><span class="line"><span class="built_in">console</span>.log(test5)</span><br><span class="line"><span class="built_in">console</span>.log(test5.__proto__ === test3.__proto__);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(test2);<span class="comment">//&#123;x:1&#125;</span></span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title="{}"></a>{}</h2><p>{}javascript对象字面量创建的形式，其本质和new Object()并无区别，默认都是继承了Object对象上的prototype</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> test2 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> test3 = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype)</span><br><span class="line"><span class="keyword">var</span> test4 = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test1.__proto__ === <span class="built_in">Object</span>.prototype);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(test2.__proto__ === <span class="built_in">Object</span>.prototype);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(test1.__proto__ === test2.__proto__);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(test1.__proto__ === test3.__proto__);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(test2.__proto__ === test3.__proto__);<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(test1.__proto__ === test4.__proto__);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(test2.__proto__ === test4.__proto__);<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(test3.__proto__ === test4.__proto__);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用<span class="built_in">Object</span>.create()是将对象继承到原型链上，然后可以通过对象实例的__proto__属性进行访问原型链上的属性</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="built_in">Object</span>.create(&#123;<span class="attr">x</span>:<span class="number">123</span>,<span class="attr">y</span>:<span class="number">456</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(test)   <span class="comment">//&#123;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(test.x);<span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(test.__proto__.x);<span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(test.__proto__.x === test.x);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test1 = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;<span class="attr">x</span>:<span class="number">123</span>,<span class="attr">y</span>:<span class="number">345</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(test1);<span class="comment">//&#123;x:123,y:345&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(test1.x);<span class="comment">//123</span></span><br><span class="line"><span class="built_in">console</span>.log(test1.__proto__.x);<span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(test1.__proto__.x === test1.x);<span class="comment">//false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Object-create-介绍&quot;&gt;&lt;a href=&quot;#Object-create-介绍&quot; class=&quot;headerlink&quot; title=&quot;Object.create()介绍&quot;&gt;&lt;/a&gt;&lt;strong&gt;Object.create()介绍&lt;/strong&gt;&lt;/h</summary>
      
    
    
    
    <category term="js" scheme="http://example.com/categories/js/"/>
    
    
    <category term="Object" scheme="http://example.com/tags/Object/"/>
    
  </entry>
  
  <entry>
    <title>es6之proxy详解</title>
    <link href="http://example.com/2021/01/04/proxy/"/>
    <id>http://example.com/2021/01/04/proxy/</id>
    <published>2021-01-04T05:33:19.000Z</published>
    <updated>2021-01-05T01:08:49.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、proxy的概述"><a href="#一、proxy的概述" class="headerlink" title="一、proxy的概述"></a>一、proxy的概述</h2><h3 id="proxy的兼容性"><a href="#proxy的兼容性" class="headerlink" title="proxy的兼容性"></a>proxy的兼容性</h3><p><code>proxy</code> 在目标对象的外层搭建了一层拦截，外界对目标对象的某些操作，必须通过这层拦截</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,handler)</span><br></pre></td></tr></table></figure><blockquote><p><code>new Proxy()</code> 表示生成一个<code>Proxy</code> 的实例，<code>targer</code> 参数表示所要拦截的目标对象，<code>handler</code> 参数也是一个对象，用来制定拦截行为</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target = &#123;</span><br><span class="line">    name:<span class="string">&#x27;proxyName&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">    get:<span class="function"><span class="keyword">function</span>(<span class="params">target,key</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>被读取`</span>)</span><br><span class="line">        <span class="keyword">return</span> target[key]</span><br><span class="line">    &#125;,</span><br><span class="line">    set:<span class="function"><span class="keyword">function</span>(<span class="params">target,key,value</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>被设置为<span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">        target[key] = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> targetWithLog = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,handler)</span><br><span class="line"></span><br><span class="line">targetWithLog.name      <span class="comment">//控制台输出： name被读取</span></span><br><span class="line">targetWithLog.name = <span class="string">&#x27;otherName&#x27;</span>   <span class="comment">//控制台输出：   name被设置为otherName</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(target.name)  <span class="comment">//  控制台输出：  otherName</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><code>targetWithLog</code> 读取属性的值时，实际上执行的是 <code>handler.get</code> ：在控制台输出信息，并且读取被代理对象 <code>target</code> 的属性</li><li>在 <code>targetWithLog</code> 设置属性值时，实际上制定的是 <code>handler.set</code> ：在控制台输出信息，并且设置被代理对象 <code>target</code> 的属性的值</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;,&#123;</span><br><span class="line">    get:<span class="function"><span class="keyword">function</span>(<span class="params">target,property</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">35</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proxy.name     <span class="comment">//35</span></span><br><span class="line">proxy.title    <span class="comment">//35</span></span><br><span class="line">proxy.theme    <span class="comment">//35</span></span><br><span class="line"><span class="comment">//由于拦截函数总是返回35，所以访问任何属性都得到35</span></span><br></pre></td></tr></table></figure><h3 id="Proxy实例也可以作为其他对象的原型对象"><a href="#Proxy实例也可以作为其他对象的原型对象" class="headerlink" title="Proxy实例也可以作为其他对象的原型对象"></a>Proxy实例也可以作为其他对象的原型对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;,&#123;</span><br><span class="line">    get:<span class="function"><span class="keyword">function</span>(<span class="params">target,property</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">35</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(proxy)</span><br><span class="line">obj.time   <span class="comment">//35</span></span><br></pre></td></tr></table></figure><blockquote><p><code>proxy</code> 对象是 <code>object</code> 对象的原型， <code>obj</code> 对象本身没有 <code>time</code> 属性，根据原型链，会在 <code>proxy</code> 对象上读取该属性，导致被拦截</p></blockquote><h3 id="Proxy的作用"><a href="#Proxy的作用" class="headerlink" title="Proxy的作用"></a>Proxy的作用</h3><blockquote><p>对于代理模式proxy的作用主要体现在三方面</p><ul><li>拦截和监视外部对对象的访问</li><li>降低函数或类的复杂度</li><li>在复杂操作前对操作进行校验或对所需资源进行管理</li></ul></blockquote><h2 id="二、Proxy所能代理的范围——handler"><a href="#二、Proxy所能代理的范围——handler" class="headerlink" title="二、Proxy所能代理的范围——handler"></a>二、Proxy所能代理的范围——handler</h2><blockquote><p>实际上 <code>handler</code> 本身就是 <code>es6</code> 所设计的一个对象，它的作用就是用来自定义代理对象的各种可代理操作。它本身一共有13种方法，都可以代理其中一种操作，其13种方法如下</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在读取代理对象的原型时触发该操作，比如在执行 Object.getPrototypeOf(proxy) 时。</span></span><br><span class="line">handler.getPrototypeOf()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在设置代理对象的原型时触发该操作，比如在执行 Object.setPrototypeOf(proxy, null) 时。</span></span><br><span class="line">handler.setPrototypeOf()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在判断一个代理对象是否是可扩展时触发该操作，比如在执行 Object.isExtensible(proxy) 时。</span></span><br><span class="line">handler.isExtensible()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在让一个代理对象不可扩展时触发该操作，比如在执行 Object.preventExtensions(proxy) 时。</span></span><br><span class="line">handler.preventExtensions()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在获取代理对象某个属性的属性描述时触发该操作，比如在执行 Object.getOwnPropertyDescriptor(proxy, &quot;foo&quot;) 时。</span></span><br><span class="line">handler.getOwnPropertyDescriptor()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在定义代理对象某个属性时的属性描述时触发该操作，比如在执行 Object.defineProperty(proxy, &quot;foo&quot;, &#123;&#125;) 时。</span></span><br><span class="line">andler.defineProperty()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在判断代理对象是否拥有某个属性时触发该操作，比如在执行 &quot;foo&quot; in proxy 时。</span></span><br><span class="line">handler.has()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在读取代理对象的某个属性时触发该操作，比如在执行 proxy.foo 时。</span></span><br><span class="line">handler.get()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在给代理对象的某个属性赋值时触发该操作，比如在执行 proxy.foo = 1 时。</span></span><br><span class="line">handler.set()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在删除代理对象的某个属性时触发该操作，比如在执行 delete proxy.foo 时。</span></span><br><span class="line">handler.deleteProperty()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在获取代理对象的所有属性键时触发该操作，比如在执行 Object.getOwnPropertyNames(proxy) 时。</span></span><br><span class="line">handler.ownKeys()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在调用一个目标对象为函数的代理对象时触发该操作，比如在执行 proxy() 时。</span></span><br><span class="line">handler.apply()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在给一个目标对象为构造函数的代理对象构造实例时触发该操作，比如在执行new proxy() 时。</span></span><br><span class="line">handler.construct()</span><br></pre></td></tr></table></figure><h2 id="三、Proxy场景"><a href="#三、Proxy场景" class="headerlink" title="三、Proxy场景"></a>三、Proxy场景</h2><h3 id="3-1实现私有变量"><a href="#3-1实现私有变量" class="headerlink" title="3.1实现私有变量"></a>3.1实现私有变量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> target = &#123;</span><br><span class="line">   name: <span class="string">&#x27;poetries&#x27;</span>,</span><br><span class="line">   _age: <span class="number">22</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> logHandler = &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params">target,key</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(key.startsWith(<span class="string">&#x27;_&#x27;</span>))&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;私有变量age不能被访问&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target[key];</span><br><span class="line">  &#125;,</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span>(<span class="params">target, key, value</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(key.startsWith(<span class="string">&#x27;_&#x27;</span>))&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;私有变量age不能被修改&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">     target[key] = value;</span><br><span class="line">   &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> targetWithLog = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, logHandler);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 私有变量age不能被访问</span></span><br><span class="line">targetWithLog.name; </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 私有变量age不能被修改</span></span><br><span class="line">targetWithLog.name = <span class="string">&#x27;others&#x27;</span>; </span><br></pre></td></tr></table></figure><blockquote><p>在下面的代码中，我们声明了一个私有的 <code>apiKey</code>，便于 <code>api</code> 这个对象内部的方法调用，但不希望从外部也能够访问 <code>api._apiKey</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> api = &#123;  </span><br><span class="line">    _apiKey: <span class="string">&#x27;123abc456def&#x27;</span>,</span><br><span class="line">    <span class="comment">/* mock methods that use this._apiKey */</span></span><br><span class="line">    getUsers: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;, </span><br><span class="line">    getUser: <span class="function"><span class="keyword">function</span>(<span class="params">userId</span>)</span>&#123;&#125;, </span><br><span class="line">    setUser: <span class="function"><span class="keyword">function</span>(<span class="params">userId, config</span>)</span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// logs &#x27;123abc456def&#x27;;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;An apiKey we want to keep private&quot;</span>, api._apiKey);</span><br><span class="line"></span><br><span class="line"><span class="comment">// get and mutate _apiKeys as desired</span></span><br><span class="line"><span class="keyword">var</span> apiKey = api._apiKey;  </span><br><span class="line">api._apiKey = <span class="string">&#x27;987654321&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>很显然，约定俗成是没有束缚力的。使用 <code>ES6 Proxy</code> 我们就可以实现真实的私有变量了，下面针对不同的读取方式演示两个不同的私有化方法。第一种方法是使用 <code>set / get</code> 拦截读写请求并返回 <code>undefined</code>:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> api = &#123;  </span><br><span class="line">    _apiKey: <span class="string">&#x27;123abc456def&#x27;</span>,</span><br><span class="line">    getUsers: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; &#125;, </span><br><span class="line">    getUser: <span class="function"><span class="keyword">function</span>(<span class="params">userId</span>)</span>&#123; &#125;, </span><br><span class="line">    setUser: <span class="function"><span class="keyword">function</span>(<span class="params">userId, config</span>)</span>&#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> RESTRICTED = [<span class="string">&#x27;_apiKey&#x27;</span>];</span><br><span class="line">api = <span class="keyword">new</span> <span class="built_in">Proxy</span>(api, &#123;  </span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target, key, proxy</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(RESTRICTED.indexOf(key) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> is restricted. Please see api documentation for further info.`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, key, proxy);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">target, key, value, proxy</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(RESTRICTED.indexOf(key) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> is restricted. Please see api documentation for further info.`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, key, value, proxy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下操作都会抛出错误</span></span><br><span class="line"><span class="built_in">console</span>.log(api._apiKey);</span><br><span class="line">api._apiKey = <span class="string">&#x27;987654321&#x27;</span>;  </span><br></pre></td></tr></table></figure><blockquote><p>第二种方法是使用 <code>has</code> 拦截 <code>in</code> 操作</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> api = &#123;  </span><br><span class="line">    _apiKey: <span class="string">&#x27;123abc456def&#x27;</span>,</span><br><span class="line">    getUsers: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; &#125;, </span><br><span class="line">    getUser: <span class="function"><span class="keyword">function</span>(<span class="params">userId</span>)</span>&#123; &#125;, </span><br><span class="line">    setUser: <span class="function"><span class="keyword">function</span>(<span class="params">userId, config</span>)</span>&#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> RESTRICTED = [<span class="string">&#x27;_apiKey&#x27;</span>];</span><br><span class="line">api = <span class="keyword">new</span> <span class="built_in">Proxy</span>(api, &#123;  </span><br><span class="line">    <span class="function"><span class="title">has</span>(<span class="params">target, key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (RESTRICTED.indexOf(key) &gt; -<span class="number">1</span>) ?</span><br><span class="line">            <span class="literal">false</span> :</span><br><span class="line">            <span class="built_in">Reflect</span>.has(target, key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// these log false, and `for in` iterators will ignore _apiKey</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;_apiKey&quot;</span> <span class="keyword">in</span> api);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> api) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (api.hasOwnProperty(key) &amp;&amp; key === <span class="string">&quot;_apiKey&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;This will never be logged because the proxy obscures _apiKey...&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2抽离校验模块"><a href="#3-2抽离校验模块" class="headerlink" title="3.2抽离校验模块"></a>3.2抽离校验模块</h3><blockquote><p>让我们从一个简单的类型校验开始做起，这个示例演示了如何使用 <code>Proxy</code> 保障数据类型的准确性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numericDataStore = &#123;  </span><br><span class="line">    count: <span class="number">0</span>,</span><br><span class="line">    amount: <span class="number">1234</span>,</span><br><span class="line">    total: <span class="number">14</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">numericDataStore = <span class="keyword">new</span> <span class="built_in">Proxy</span>(numericDataStore, &#123;  </span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">target, key, value, proxy</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">&quot;Properties in numericDataStore can only be numbers&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value, proxy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抛出错误，因为 &quot;foo&quot; 不是数值</span></span><br><span class="line">numericDataStore.count = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值成功</span></span><br><span class="line">numericDataStore.count = <span class="number">333</span>;</span><br></pre></td></tr></table></figure><blockquote><p>如果要直接为对象的所有属性开发一个校验器可能很快就会让代码结构变得臃肿，使用 <code>Proxy</code> 则可以将校验器从核心逻辑分离出来自成一体</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createValidator</span>(<span class="params">target, validator</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;</span><br><span class="line">        _validator: validator,</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">target, key, value, proxy</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (target.hasOwnProperty(key)) &#123;</span><br><span class="line">                <span class="keyword">let</span> validator = <span class="built_in">this</span>._validator[key];</span><br><span class="line">                <span class="keyword">if</span> (!!validator(value)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value, proxy);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">`Cannot set <span class="subst">$&#123;key&#125;</span> to <span class="subst">$&#123;value&#125;</span>. Invalid.`</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> is not a valid property`</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personValidators = &#123;  </span><br><span class="line">    <span class="function"><span class="title">name</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">age</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> age === <span class="string">&#x27;number&#x27;</span> &amp;&amp; age &gt; <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name, age</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="keyword">return</span> createValidator(<span class="built_in">this</span>, personValidators);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bill = <span class="keyword">new</span> Person(<span class="string">&#x27;Bill&#x27;</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下操作都会报错</span></span><br><span class="line">bill.name = <span class="number">0</span>;  </span><br><span class="line">bill.age = <span class="string">&#x27;Bill&#x27;</span>;  </span><br><span class="line">bill.age = <span class="number">15</span>;  </span><br></pre></td></tr></table></figure><blockquote><p>通过校验器和主逻辑的分离，你可以无限扩展 <code>personValidators</code> 校验器的内容，而不会对相关的类或函数造成直接破坏。更复杂一点，我们还可以使用 <code>Proxy</code> 模拟类型检查，检查函数是否接收了类型和数量都正确的参数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;  </span><br><span class="line">    pickyMethodOne: <span class="function"><span class="keyword">function</span>(<span class="params">obj, str, num</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">    pickyMethodTwo: <span class="function"><span class="keyword">function</span>(<span class="params">num, obj</span>) </span>&#123; <span class="comment">/*... */</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> argTypes = &#123;  </span><br><span class="line">    pickyMethodOne: [<span class="string">&quot;object&quot;</span>, <span class="string">&quot;string&quot;</span>, <span class="string">&quot;number&quot;</span>],</span><br><span class="line">    pickyMethodTwo: [<span class="string">&quot;number&quot;</span>, <span class="string">&quot;object&quot;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;  </span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params">target, key, proxy</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> value = target[key];</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> checkArgs = argChecker(key, args, argTypes[key]);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Reflect</span>.apply(value, target, args);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">argChecker</span>(<span class="params">name, args, checkers</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> idx = <span class="number">0</span>; idx &lt; args.length; idx++) &#123;</span><br><span class="line">        <span class="keyword">var</span> arg = args[idx];</span><br><span class="line">        <span class="keyword">var</span> type = checkers[idx];</span><br><span class="line">        <span class="keyword">if</span> (!arg || <span class="keyword">typeof</span> arg !== type) &#123;</span><br><span class="line">            <span class="built_in">console</span>.warn(<span class="string">`You are incorrectly implementing the signature of <span class="subst">$&#123;name&#125;</span>. Check param <span class="subst">$&#123;idx + <span class="number">1</span>&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.pickyMethodOne();  </span><br><span class="line"><span class="comment">// &gt; You are incorrectly implementing the signature of pickyMethodOne. Check param 1</span></span><br><span class="line"><span class="comment">// &gt; You are incorrectly implementing the signature of pickyMethodOne. Check param 2</span></span><br><span class="line"><span class="comment">// &gt; You are incorrectly implementing the signature of pickyMethodOne. Check param 3</span></span><br><span class="line"></span><br><span class="line">obj.pickyMethodTwo(<span class="string">&quot;wopdopadoo&quot;</span>, &#123;&#125;);  </span><br><span class="line"><span class="comment">// &gt; You are incorrectly implementing the signature of pickyMethodTwo. Check param 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// No warnings logged</span></span><br><span class="line">obj.pickyMethodOne(&#123;&#125;, <span class="string">&quot;a little string&quot;</span>, <span class="number">123</span>);  </span><br><span class="line">obj.pickyMethodOne(<span class="number">123</span>, &#123;&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-3访问日志"><a href="#3-3访问日志" class="headerlink" title="3.3访问日志"></a>3.3访问日志</h3><blockquote><p>对于那些调用频繁、运行缓慢或占用执行环境资源较多的属性或接口，开发者会希望记录它们的使用情况或性能表现，这个时候就可以使用 <code>Proxy</code> 充当中间件的角色，轻而易举实现日志功能</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> api = &#123;  </span><br><span class="line">    _apiKey: <span class="string">&#x27;123abc456def&#x27;</span>,</span><br><span class="line">    getUsers: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">    getUser: <span class="function"><span class="keyword">function</span>(<span class="params">userId</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">    setUser: <span class="function"><span class="keyword">function</span>(<span class="params">userId, config</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logMethodAsync</span>(<span class="params">timestamp, method</span>) </span>&#123;  </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;timestamp&#125;</span> - Logging <span class="subst">$&#123;method&#125;</span> request asynchronously.`</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">api = <span class="keyword">new</span> <span class="built_in">Proxy</span>(api, &#123;  </span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params">target, key, proxy</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> value = target[key];</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...<span class="built_in">arguments</span></span>) </span>&#123;</span><br><span class="line">            logMethodAsync(<span class="keyword">new</span> <span class="built_in">Date</span>(), key);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Reflect</span>.apply(value, target, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">api.getUsers();</span><br></pre></td></tr></table></figure><h3 id="3-4预警和拦截"><a href="#3-4预警和拦截" class="headerlink" title="3.4预警和拦截"></a>3.4预警和拦截</h3><blockquote><p>假设你不想让其他开发者删除 <code>noDelete</code> 属性，还想让调用 <code>oldMethod</code> 的开发者了解到这个方法已经被废弃了，或者告诉开发者不要修改 <code>doNotChange</code> 属性，那么就可以使用 <code>Proxy</code> 来实现</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dataStore = &#123;  </span><br><span class="line">    noDelete: <span class="number">1235</span>,</span><br><span class="line">    oldMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span> &#125;,</span><br><span class="line">    doNotChange: <span class="string">&quot;tried and true&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> NODELETE = [<span class="string">&#x27;noDelete&#x27;</span>];  </span><br><span class="line"><span class="keyword">const</span> NOCHANGE = [<span class="string">&#x27;doNotChange&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> DEPRECATED = [<span class="string">&#x27;oldMethod&#x27;</span>];  </span><br><span class="line"></span><br><span class="line">dataStore = <span class="keyword">new</span> <span class="built_in">Proxy</span>(dataStore, &#123;  </span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">target, key, value, proxy</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (NOCHANGE.includes(key)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">`Error! <span class="subst">$&#123;key&#125;</span> is immutable.`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value, proxy);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">deleteProperty</span>(<span class="params">target, key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (NODELETE.includes(key)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">`Error! <span class="subst">$&#123;key&#125;</span> cannot be deleted.`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.deleteProperty(target, key);</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target, key, proxy</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEPRECATED.includes(key)) &#123;</span><br><span class="line">            <span class="built_in">console</span>.warn(<span class="string">`Warning! <span class="subst">$&#123;key&#125;</span> is deprecated.`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> val = target[key];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">&#x27;function&#x27;</span> ?</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">Reflect</span>.apply(target[key], target, args);</span><br><span class="line">            &#125; :</span><br><span class="line">            val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// these will throw errors or log warnings, respectively</span></span><br><span class="line">dataStore.doNotChange = <span class="string">&quot;foo&quot;</span>;  </span><br><span class="line"><span class="keyword">delete</span> dataStore.noDelete;  </span><br><span class="line">dataStore.oldMethod();</span><br></pre></td></tr></table></figure><h3 id="3-5过滤操作"><a href="#3-5过滤操作" class="headerlink" title="3.5过滤操作"></a>3.5过滤操作</h3><blockquote><p>某些操作会非常占用资源，比如传输大文件，这个时候如果文件已经在分块发送了，就不需要在对新的请求作出相应（非绝对），这个时候就可以使用 <code>Proxy</code> 对当请求进行特征检测，并根据特征过滤出哪些是不需要响应的，哪些是需要响应的。下面的代码简单演示了过滤特征的方式，并不是完整代码，相信大家会理解其中的妙处</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;  </span><br><span class="line">    getGiantFile: <span class="function"><span class="keyword">function</span>(<span class="params">fileId</span>) </span>&#123;<span class="comment">/*...*/</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;  </span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target, key, proxy</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> id = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">let</span> isEnroute = checkEnroute(id);</span><br><span class="line">            <span class="keyword">let</span> isDownloading = checkStatus(id);      </span><br><span class="line">            <span class="keyword">let</span> cached = getCached(id);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (isEnroute || isDownloading) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cached) &#123;</span><br><span class="line">                <span class="keyword">return</span> cached;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Reflect</span>.apply(target[key], target, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-6中断代理"><a href="#3-6中断代理" class="headerlink" title="3.6中断代理"></a>3.6中断代理</h3><blockquote><p><code>Proxy</code> 支持随时取消对 <code>target</code> 的代理，这一操作常用于完全封闭对数据或接口的访问。在下面的示例中，我们使用了 <code>Proxy.revocable</code> 方法创建了可撤销代理的代理对象：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sensitiveData = &#123; <span class="attr">username</span>: <span class="string">&#x27;devbryce&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> &#123;sensitiveData, revokeAccess&#125; = <span class="built_in">Proxy</span>.revocable(sensitiveData, handler);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleSuspectedHack</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    revokeAccess();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// logs &#x27;devbryce&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(sensitiveData.username);</span><br><span class="line">handleSuspectedHack();</span><br><span class="line"><span class="comment">// TypeError: Revoked</span></span><br><span class="line"><span class="built_in">console</span>.log(sensitiveData.username);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、proxy的概述&quot;&gt;&lt;a href=&quot;#一、proxy的概述&quot; class=&quot;headerlink&quot; title=&quot;一、proxy的概述&quot;&gt;&lt;/a&gt;一、proxy的概述&lt;/h2&gt;&lt;h3 id=&quot;proxy的兼容性&quot;&gt;&lt;a href=&quot;#proxy的兼容性&quot; c</summary>
      
    
    
    
    <category term="es6" scheme="http://example.com/categories/es6/"/>
    
    
    <category term="proxy" scheme="http://example.com/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://example.com/2020/12/24/%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2020/12/24/%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-12-24T03:07:32.000Z</published>
    <updated>2020-12-24T03:27:13.059Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>git快速操作</title>
    <link href="http://example.com/2020/12/24/git%E5%BF%AB%E9%80%9F%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2020/12/24/git%E5%BF%AB%E9%80%9F%E6%93%8D%E4%BD%9C/</id>
    <published>2020-12-24T03:07:32.000Z</published>
    <updated>2021-01-04T02:42:22.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速从github上下载项目到本地并提交代码"><a href="#快速从github上下载项目到本地并提交代码" class="headerlink" title="快速从github上下载项目到本地并提交代码"></a><strong>快速从github上下载项目到本地并提交代码</strong></h1><p> 在想要下载的文件夹下，右击空白处，选择Git Bash Here ,对于首次安装git的机器，一定要首先进行用户账户信息的配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="built_in">global</span> user.name ‘PerfectLuo’ <span class="comment">//git config --global user.name &#x27;github用户名&#x27;</span></span><br><span class="line">git config --<span class="built_in">global</span> user.email ‘<span class="number">848182483</span>@qq.com’ <span class="comment">//git config --global user.email &#x27;github邮箱&#x27;</span></span><br><span class="line">git clone https:<span class="comment">//github.com/PerfectLuo/PerfectLuo.github.io.git //git clone 克隆地址</span></span><br><span class="line">cd PerfectLuo.github.io/   <span class="comment">//进入对应的文件夹</span></span><br><span class="line">git add . <span class="comment">//将你本地所有修改了的文件添加到暂存区</span></span><br><span class="line">git commit -m <span class="string">&#x27;此时提交描述&#x27;</span>   <span class="comment">//提交描述</span></span><br><span class="line">git pull origin 远程分支名  <span class="comment">//这是下拉代码，将远程最新的代码先跟你本地的代码合并一下，如果确定远程没有更新，可以不用这个，最好是每次都执行以下，完成之后打开代码查看有没有冲突，并解决，如果有冲突解决完成以后再次执行1跟2的操作</span></span><br><span class="line">git push origin master  <span class="comment">//git push origin 本地分支名:refs/remotes/远程分支名） 将代码推至远程就可以了</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">快速从github上下载项目到本地并提交代码.</summary>
    
    
    
    <category term="git" scheme="http://example.com/categories/git/"/>
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
</feed>
